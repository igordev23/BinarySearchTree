{"mappings":"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","sources":["src/typescript/index.ts"],"sourcesContent":["// Nó da Árvore Binária de Busca\r\nclass TreeNode<T> {\r\n  value: T;\r\n  left: TreeNode<T> | null = null;\r\n  right: TreeNode<T> | null = null;\r\n\r\n  constructor(value: T) {\r\n    this.value = value;\r\n  }\r\n}\r\n\r\n// Classe da Árvore Binária de Busca\r\nclass BinarySearchTree<T> {\r\n  private root: TreeNode<T> | null = null;\r\n  private count: number = 0;\r\n\r\n  // Inserir um elemento na árvore\r\n  insert(value: T): void {\r\n    const newNode = new TreeNode(value);\r\n    if (this.root === null) {\r\n      this.root = newNode;\r\n    } else {\r\n      this.insertNode(this.root, newNode);\r\n    }\r\n    this.count++;\r\n  }\r\n\r\n  private insertNode(node: TreeNode<T>, newNode: TreeNode<T>): void {\r\n    if (newNode.value < node.value) {\r\n      if (node.left === null) {\r\n        node.left = newNode;\r\n      } else {\r\n        this.insertNode(node.left, newNode);\r\n      }\r\n    } else {\r\n      if (node.right === null) {\r\n        node.right = newNode;\r\n      } else {\r\n        this.insertNode(node.right, newNode);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Pesquisar um elemento na árvore\r\n  search(value: T): boolean {\r\n    return this.searchNode(this.root, value);\r\n  }\r\n\r\n  private searchNode(node: TreeNode<T> | null, value: T): boolean {\r\n    if (node === null) return false;\r\n    if (value === node.value) return true;\r\n    if (value < node.value) return this.searchNode(node.left, value);\r\n    return this.searchNode(node.right, value);\r\n  }\r\n\r\n  // Busca em largura (BFS)\r\n  breadthFirstTraversal(): void {\r\n    if (this.root === null) return;\r\n    const queue: TreeNode<T>[] = [this.root];\r\n    const result: T[] = [];\r\n\r\n    while (queue.length > 0) {\r\n      const current = queue.shift()!;\r\n      result.push(current.value);\r\n      if (current.left) queue.push(current.left);\r\n      if (current.right) queue.push(current.right);\r\n    }\r\n\r\n    console.log(\"Busca em Largura (BFS):\", result.join(\" -> \"));\r\n  }\r\n\r\n  // Pré-Ordem\r\n  preOrderTraversal(): void {\r\n    const result: T[] = [];\r\n    this.preOrder(this.root, result);\r\n    console.log(\"Pré-Ordem:\", result.join(\" -> \"));\r\n  }\r\n\r\n  private preOrder(node: TreeNode<T> | null, result: T[]): void {\r\n    if (node !== null) {\r\n      result.push(node.value);\r\n      this.preOrder(node.left, result);\r\n      this.preOrder(node.right, result);\r\n    }\r\n  }\r\n\r\n  // Em-Ordem\r\n  inOrderTraversal(): void {\r\n    const result: T[] = [];\r\n    this.inOrder(this.root, result);\r\n    console.log(\"Em-Ordem:\", result.join(\" -> \"));\r\n  }\r\n\r\n  private inOrder(node: TreeNode<T> | null, result: T[]): void {\r\n    if (node !== null) {\r\n      this.inOrder(node.left, result);\r\n      result.push(node.value);\r\n      this.inOrder(node.right, result);\r\n    }\r\n  }\r\n\r\n  // Pós-Ordem\r\n  postOrderTraversal(): void {\r\n    const result: T[] = [];\r\n    this.postOrder(this.root, result);\r\n    console.log(\"Pós-Ordem:\", result.join(\" -> \"));\r\n  }\r\n\r\n  private postOrder(node: TreeNode<T> | null, result: T[]): void {\r\n    if (node !== null) {\r\n      this.postOrder(node.left, result);\r\n      this.postOrder(node.right, result);\r\n      result.push(node.value);\r\n    }\r\n  }\r\n\r\n  // Altura da árvore\r\n  height(): number {\r\n    return this.calculateHeight(this.root);\r\n  }\r\n\r\n  private calculateHeight(node: TreeNode<T> | null): number {\r\n    if (node === null) return -1;\r\n    const leftHeight = this.calculateHeight(node.left);\r\n    const rightHeight = this.calculateHeight(node.right);\r\n    return Math.max(leftHeight, rightHeight) + 1;\r\n  }\r\n\r\n  // Quantidade de elementos\r\n  size(): number {\r\n    return this.count;\r\n  }\r\n}\r\n\r\n// Testando a Árvore\r\nconst bst = new BinarySearchTree<number>();\r\n\r\nbst.insert(50);\r\nbst.insert(30);\r\nbst.insert(70);\r\nbst.insert(20);\r\nbst.insert(40);\r\nbst.insert(60);\r\nbst.insert(80);\r\n\r\nconsole.log(\"Elemento 40 está na árvore?\", bst.search(40)); // true\r\nconsole.log(\"Elemento 90 está na árvore?\", bst.search(90)); // false\r\n\r\nbst.breadthFirstTraversal(); // Busca em Largura\r\nbst.preOrderTraversal();     // Pré-Ordem\r\nbst.inOrderTraversal();      // Em-Ordem\r\nbst.postOrderTraversal();    // Pós-Ordem\r\n\r\nconsole.log(\"Altura da árvore:\", bst.height());  // Deve exibir 2\r\nconsole.log(\"Quantidade de elementos:\", bst.size()); // Deve exibir 7\r\n"],"names":[],"version":3,"file":"index.a2469503.js.map","sourceRoot":"/__parcel_source_root/"}